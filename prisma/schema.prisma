datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model OTP {
  id        String    @id @default(uuid())
  code      String    @unique
  used      Boolean   @default(false)
  createdAt DateTime  @default(now())
  usedAt    DateTime?
  
  @@index([code])
}

model FailedAttempt {
  id        String   @id @default(uuid())
  codeHash  String
  ipHash    String?
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([codeHash])
}

enum AgentStatus {
  STARTING
  RUNNING
  STOPPED
  ERROR
}

enum CurveSide {
  LEFT
  RIGHT
}

model ElizaAgent {
  id             String      @id @default(uuid())
  name           String
  curveSide      CurveSide
  creatorWallet  String
  status         AgentStatus @default(STARTING)
  containerId    String?
  runtimeAgentId String?
  port           Int?
  characterConfig Json
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  TradingInformation TradingInformation[]
  degenScore     Float? @default(0)
  winScore       Float? @default(0)
  LatestMarketData     LatestMarketData?
  Wallet           AgentWallet?
  Token            AgentToken?

  @@map("eliza_agents")
}

model TradingInformation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  elizaAgentId   String
  elizaAgent     ElizaAgent @relation(fields: [elizaAgentId], references: [id])
  information Json

  @@map("trading_information")
}

model LatestMarketData {
  id             String      @id @default(uuid())
  elizaAgentId   String      @unique
  elizaAgent     ElizaAgent  @relation(fields: [elizaAgentId], references: [id])
  price          Float @default(0)
  priceChange24h Float @default(0)
  holders        Int @default(0)
  marketCap      Float @default(0)
  updatedAt      DateTime    @updatedAt
  createdAt      DateTime    @default(now())

  @@index([price])
  @@index([priceChange24h])
  @@index([holders])
  @@index([marketCap])
  @@map("latest_market_data")
}

enum OrchestrationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

model Orchestration {
  id            String              @id @default(uuid())
  type          String              // Type of orchestration (e.g., "agent-creation")
  status        OrchestrationStatus
  currentStepId String
  result        Json?               // Store result data
  error         String?             // Error message if failed
  progress      Float               @default(0)
  metadata      Json?               // Store metadata
  data          Json                // Store orchestration input data
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("orchestrations")
}

model AgentWallet {
  id                    String     @id @default(uuid())
  privateKey            String
  publicKey            String
  contractAddress      String
  fundTransactionHash  String?
  deployTransactionHash String?
  deployedAddress      String?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  elizaAgentId   String      @unique
  elizaAgent     ElizaAgent  @relation(fields: [elizaAgentId], references: [id])

  @@map("agent_wallet")
}

model AgentToken {
  id                   String     @id @default(uuid())
  token                String
  symbol               String
  contratAddress       String
  buyTax               Int
  sellTax              Int
  elizaAgentId   String      @unique
  elizaAgent     ElizaAgent  @relation(fields: [elizaAgentId], references: [id])
  Transaction          Transaction[]

  @@map("agent_token")
}

model Transaction {
  id            String     @id @default(uuid())
  buyToken      String
  sellToken     String
  buyAmount     BigInt
  sellAmount    BigInt
  hash          String
  tokenId       String
  userAddress   String
  AgentToken    AgentToken @relation(fields: [tokenId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([createdAt])
  @@map("transactions")
}