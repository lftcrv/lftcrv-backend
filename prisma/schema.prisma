generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Enums
enum WalletAddressType {
  NATIVE
  DERIVED
}

enum AgentStatus {
  STARTING
  RUNNING
  STOPPED
  FAILED
  ERROR
}

enum CurveSide {
  LEFT
  RIGHT
}

enum AnalysisType {
  TECHNICAL
  SENTIMENT
  MARKET
  OVERALL
}

enum OrchestrationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum BondingStatus {
  BONDING
  LIVE
}

enum AccessCodeType {
  ADMIN
  REFERRAL
  TEMPORARY
}

/// Models
model OTP {
  id        String    @id @default(uuid())
  code      String    @unique
  used      Boolean   @default(false)
  createdAt DateTime  @default(now())
  usedAt    DateTime?

  @@index([code])
}

model AccessCode {
  id          String         @id @default(uuid())
  code        String         @unique
  createdAt   DateTime       @default(now())
  expiresAt   DateTime?
  maxUses     Int?
  currentUses Int            @default(0)
  createdBy   String?
  isActive    Boolean        @default(true)
  type        AccessCodeType
  description String?
  agents      ElizaAgent[]

  @@index([code])
  @@index([isActive])
  @@index([type])
  @@map("access_codes")
}

model LatestMarketData {
  id             String        @id @default(uuid())
  elizaAgentId   String        @unique
  price          Float         @default(0)
  priceChange24h Float         @default(0)
  holders        Int           @default(0)
  marketCap      Float         @default(0)
  bondingStatus  BondingStatus @default(BONDING)
  updatedAt      DateTime      @updatedAt
  createdAt      DateTime      @default(now())
  forkCount      Int           @default(0)
  pnlCycle       Float         @default(0)
  pnl24h         Float         @default(0)
  tradeCount     Int           @default(0)
  tvl            Float         @default(0)
  balanceInUSD   Float         @default(0)
  pnlRank        Int?
  elizaAgent     ElizaAgent    @relation(fields: [elizaAgentId], references: [id])

  @@index([price])
  @@index([priceChange24h])
  @@index([marketCap])
  @@index([tvl])
  @@index([pnl24h])
  @@index([pnlRank])
  @@map("latest_market_data")
}

model FailedAttempt {
  id        String   @id @default(uuid())
  codeHash  String
  ipHash    String?
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([codeHash])
}

model ParadexMarket {
  id            String   @id @default(uuid())
  symbol        String   @unique
  baseCurrency  String
  quoteCurrency String
  assetKind     String
  isActive      Boolean  @default(true)
  positionLimit String
  minNotional   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("paradex_markets")
}

model Orchestration {
  id            String              @id @default(uuid())
  type          String
  status        OrchestrationStatus
  currentStepId String
  data          Json
  result        Json?
  error         String?
  progress      Float               @default(0)
  metadata      Json?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("orchestrations")
}

model Analysis {
  id        String       @id @default(uuid())
  type      AnalysisType
  data      Json
  score     Float?
  timestamp DateTime     @default(now())
  metadata  Json?

  @@index([timestamp])
  @@map("analyses")
}

model ElizaAgent {
  id                   String                     @id @default(uuid())
  name                 String
  curveSide            CurveSide
  creatorWallet        String
  deploymentFeesTxHash String                     @map("deployment_fees_tx_hash")
  status               AgentStatus                @default(STARTING)
  failureReason        String?
  containerId          String?
  runtimeAgentId       String?
  port                 Int?
  characterConfig      Json
  profilePicture       String?
  degenScore           Float?                     @default(0)
  winScore             Float?                     @default(0)
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @updatedAt
  accessCodeId         String?
  accessGrantedAt      DateTime?
  forkedFromId         String?
  forkedFrom           ElizaAgent?                @relation("AgentForks", fields: [forkedFromId], references: [id])
  forks                ElizaAgent[]               @relation("AgentForks")
  Token                AgentToken?
  Wallet               AgentWallet?
  accessCode           AccessCode?                @relation(fields: [accessCodeId], references: [id])
  LatestMarketData     LatestMarketData?
  TradingInformation   TradingInformation[]
  PerformanceSnapshots AgentPerformanceSnapshot[]
  AccountBalances      ParadexAccountBalance[]

  @@map("eliza_agents")
}

model TradingInformation {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  information  Json
  elizaAgentId String
  elizaAgent   ElizaAgent @relation(fields: [elizaAgentId], references: [id])

  @@map("trading_information")
}

model AgentWallet {
  id                    String     @id @default(uuid())
  privateKey            String
  publicKey             String
  ethPrivateKey         String
  ethAccountAddress     String
  contractAddress       String
  fundTransactionHash   String?
  deployTransactionHash String?
  deployedAddress       String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  elizaAgentId          String     @unique
  elizaAgent            ElizaAgent @relation(fields: [elizaAgentId], references: [id])

  @@map("agent_wallet")
}

model AgentToken {
  id              String          @id @default(uuid())
  token           String
  symbol          String
  contractAddress String
  buyTax          Int
  sellTax         Int
  elizaAgentId    String          @unique
  elizaAgent      ElizaAgent      @relation(fields: [elizaAgentId], references: [id])
  Prices          PriceForToken[]
  Transaction     Transaction[]

  @@map("agent_token")
}

model Transaction {
  id          String     @id @default(uuid())
  buyToken    String
  sellToken   String
  buyAmount   BigInt
  sellAmount  BigInt
  hash        String
  userAddress String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  tokenId     String
  AgentToken  AgentToken @relation(fields: [tokenId], references: [id])

  @@index([createdAt, userAddress])
  @@map("transactions")
}

model PriceForToken {
  id         String     @id @default(uuid())
  price      String
  timestamp  DateTime
  tokenId    String
  AgentToken AgentToken @relation(fields: [tokenId], references: [id])

  @@map("price_for_token")
}

model PortfolioTokenBalance {
  id               String                @id @default(uuid())
  accountBalanceId String                @map("account_balance_id")
  tokenSymbol      String                @map("token_symbol") @db.VarChar(50)
  amount           Decimal               @db.Decimal(18, 8)
  priceUsd         Decimal               @map("price_usd") @db.Decimal(18, 8)
  valueUsd         Decimal               @map("value_usd") @db.Decimal(18, 8)
  createdAt        DateTime              @default(now()) @map("created_at")
  accountBalance   ParadexAccountBalance @relation(fields: [accountBalanceId], references: [id], onDelete: Cascade)

  @@index([accountBalanceId])
  @@index([tokenSymbol])
  @@index([createdAt])
  @@map("portfolio_token_balances")
}

model ParadexAccountBalance {
  id            String                  @id @default(uuid())
  agentId       String
  balanceInUSD  Float
  createdAt     DateTime                @default(now())
  agent         ElizaAgent              @relation(fields: [agentId], references: [id])
  tokenBalances PortfolioTokenBalance[]

  @@index([agentId])
  @@index([createdAt])
  @@map("paradex_account_balances")
}

model AgentPerformanceSnapshot {
  id            String     @id @default(uuid())
  agentId       String
  timestamp     DateTime   @default(now())
  balanceInUSD  Float
  pnl           Float      @default(0)
  pnlPercentage Float      @default(0)
  pnl24h        Float      @default(0)
  pnlCycle      Float      @default(0)
  tradeCount    Int        @default(0)
  tvl           Float      @default(0)
  price         Float      @default(0)
  marketCap     Float      @default(0)
  agent         ElizaAgent @relation(fields: [agentId], references: [id])

  @@index([agentId])
  @@index([timestamp])
  @@map("agent_performance_snapshots")
}

model User {
  id              String            @id @default(cuid())
  starknetAddress String            @unique
  evmAddress      String?           @unique
  addressType     WalletAddressType
  twitterHandle   String?
  lastConnection  DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Referral system
  referralCode     ReferralCode? @relation("UserReferralCode")
  usedReferralCode String?       @map("used_referral_code")

  @@index([starknetAddress])
  @@index([evmAddress])
  @@index([usedReferralCode])
  @@map("users")
}

model ReferralCode {
  id           String    @id @default(cuid())
  code         String    @unique
  isAccessCode Boolean   @default(true)
  userId       String    @unique
  user         User      @relation("UserReferralCode", fields: [userId], references: [id])
  usageCount   Int       @default(0)
  maxUses      Int? // null means unlimited
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([code])
  @@map("referral_codes")
}
